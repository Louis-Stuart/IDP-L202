//Import motor, servo and timer (for the flashing LED) libraries
#include <Adafruit_MotorShield.h>
#include <Servo.h>
#include <arduino-timer.h>

//Gripper
//Define the 2 servo variables
Servo liftServo;
Servo gripperServo;

//Initialise motor shield and define motor variables
Adafruit_MotorShield AFMS = Adafruit_MotorShield();
Adafruit_DCMotor *leftMotor = AFMS.getMotor(1);
Adafruit_DCMotor *rightMotor = AFMS.getMotor(2);

//Initialise timer for the LED
auto timer = timer_create_default();

//Define Arduino pins for the line sensors, LEDs and Button
int leftmostlinesensorPin = 1;
int leftlinesensorPin = 2;
int rightlinesensorPin = 3;
int rightmostlinesensorPin = 4;
int redLEDPin = 10;
int greenLEDPin = 11;
int blueLEDPin =  12;
int buttonPin = 13; // Connect button to input pin 12



//define constant
int buttonPin = 13;

//Define array to hold line sensor outputs (position 0 = leftmost, position 3 = rightmost)
int lineSensors[4];

//Define standard motor speeds (0 = stopped, 250 = maximum)
int lowSpeed = 0;
int highSpeed = 250;
int medSpeed = 90;

//Define forward and backward commands for the motors (due to the orientation of the motors, these are opposite to the standard commands)
char forward = BACKWARD;
char backward = FORWARD;

//Define counter variables for the position along the route and the number of blocks delivered
int routeCounter = 0;
int delivCounter = 0;

//Define Boolean var for whether the block is green (actually black) or not green (red)
bool green = true;
//Define Boolean var for whether the block is currently picked up
bool block = false;

//Sets servo positions for the limits of the grabber motion (limited physically)
//These positions also are used in the initialisation of the grabber mechanism to the standard start position
int posGripperOpen = 5;
int posGripperClose = 90;
int posLiftUp = 150;
int posLiftDown = 70;
int posPartialLiftDown = 110;
//Defines variables for the current positions of the grabber
int posCurrentGripper = 0;
int posCurrentLift = 0;

//Defines a Boolean variable for stopping the robot once it returns to the start
bool run = true;

//Defines the set routes between the start, pickup points and delivery points

//Each array consists of multiple actions:
//L - At the next detected junction (single or double T), turn left;
//R - At the next detected junction, turn right;
//S - At the next detected junction, keep straight;
//X - Stop at the pick-up point (then choose next route and pick up block);
//W - Stop at delivery point (then choose next route and drop block);
//N - Turn left after reversing out of pick-up point;
//M - Turn right after reversing out of pick-up point;
//Z - Rotate 180 degrees after reversing from delivery point;

//start - the start
//green / red - the green / red delivery points
//P1 / P2 / P3 / P4 - the pick-up points, P1 being the nearest, then each succesive pick-up is clockwise from P1
char startP1[] = {'L', 'R', 'X'};
char P1Green[] = {'N','L','L', 'W'};
char P1Red[] = {'M','R', 'S', 'R', 'W'};
char greenP2[] = {'Z', 'S', 'S', 'R', 'R', 'X'};
char redP2[] = {'Z','S','S','S','L', 'R', 'X'};
char P2Green[] = {'M', 'R', 'L', 'S' ,'S','S','W'};
char P2Red[] = {'N','L','L', 'S', 'R', 'S', 'W'};
char greenP3[] = {'Z','S','S','S','S','R','X'};
char redP3[] = {'Z','S','S','S','L','X'};
char P3Green[] = {'M','R','S','S', 'S', 'S', 'W'};
char P3Red[] = {'N','L','S', 'S','S','W'};
char greenP4[] = {'Z','R', 'S', 'R', 'X'};
char redP4[] = {'Z','S', 'S','L', 'L', 'X'};
char P4Green[] = {'M','R','S', 'L', 'S', 'W'};
char P4Red[] = {'N','L','R', 'S', 'W'};
char redFinish[] = {'M','L','J'};
char greenFinish[] = {'N','R','J'};

//Sets up the pointer to the current route. action[0] holds the next action (e.g. 'L') to be done
char *action;

//Predefine functions
void lineSensorRead();
void lineFollowing();
void lineFollowingStraight();
void stop(int t=0);
void straight(int speed=highSpeed, int t=0);
void reverse(int speed=highSpeed, int t=0);
void turn(int high, int low, bool left);
void turn_right();
void turn_left();
void navDecision();
void actionTranslate(char action); 
int rampedServoMove(Servo &servoLocal, int currentDegree, int desiredDegree, int increment, int timeDelay = 15);
void openGripper();
void closeGripper();
void liftGripper();
void lowerGripper();
void partialLowerGripper();

//Define variables for ultrasound output and calibration
float distance = 0;
float sensitivity = 0;

//Predefine ultrasound distance sensing function
float getUltrasoundSensorReading(int pin = A0, float ADC_SOLUTION = 1023.0, int MAX_ULTRASOUND_RANG = 520);

//Predefine grabber mechanism functions
bool captureBlock(int t);
bool blockinRange(int range);
bool dropBlock();

//Predefine colour sensor functions
float getColorSensorReading(int pin = 9);
bool colorDetection();

//Function to toggle the blue LED (for the flashing while moving)
void toggleLED(){
  digitalWrite(blueLEDPin, !digitalRead(blueLEDPin));
}


//Define the setup function
void setup() {
  //Attach servos to the correct Arduino pins
  liftServo.attach(7);
  gripperServo.attach(8);

  //Position grabber mechanism to correct initial position (lifted, claw closed)
  liftServo.write(posLiftUp);
  posCurrentLift = posLiftUp;
  gripperServo.write(posGripperClose);
  posCurrentGripper = posGripperClose;

  //Allow for Serial printing to the computer (for debugging)
  Serial.begin(9600);       
  //Initialise motor shield 
  if (!AFMS.begin()) {        
    Serial.println("Could not find Motor Shield. Check wiring.");
    while (1);
  }

  //Set the mode of each pin (input or output) for the line sensors (inputs), LEDs (outputs) and button (input)
  pinMode(leftmostlinesensorPin, INPUT); // declare LED as output
  pinMode(leftlinesensorPin, INPUT); // declare Micro switch as input
  pinMode(rightlinesensorPin, INPUT); // declare LED as output
  pinMode(rightmostlinesensorPin, INPUT); // declare Micro switch as input
  pinMode(buttonPin, INPUT); // declare pushbutton as input
  pinMode(blueLEDPin, OUTPUT);
  pinMode(redLEDPin, OUTPUT);
  pinMode(greenLEDPin, OUTPUT);

  //Call the toggle_led function every 500 ms, therefore the blue LED will flash at 2Hz
  timer.every(500, toggleLED);

  //Initially set the action (current route) variable to the first route (from the start to pick-up 1)
  action = startP1; // define the action pointer to point to the address of the first element of the inital array
}

//Main loop
void loop() {
//Until the button is pressed, the loop will remain in this while loop
//When the button is pressed, this loop is exited and the robot will start to run
while(digitalRead(buttonPin)==0) {
  delay(100);
}

//While run == true, i.e. the robot has not been told to stop once it has returned to the start
while(run) {
  //Increment the timer for the flashing blue LED
  timer.tick();

  //Initially, routeCounter - 0 before leaving the start box
  if (routeCounter == 0) {
    //The robot will go unconditionally straight for 1.5s
    straight(highSpeed, 1500);
    //routeCounter is incremented (and won't be reset back to zero)
    routeCounter ++;
  }

  //After leaving the startbox and while on the route (held in action), routeCounter = 1
  if (routeCounter == 1) {
    //'J' indicates to stop at the startbox on finish
    if (action[0] == 'J') {
      //Robot will go unconditionally straight to enter the startbox, then stop
      straight(highSpeed, 1000);
      stop();
      //Stops loop from running, robot is finished
      run = false;
    }

    //'X' and 'W' both indicate action to stop
    if (action[0] == 'X' || action[0] == 'W'){
      //'W' indicates to stop at a delivery point
      if (action[0] == 'W'){
        //Delay for 0.5s (split up to allow for handling of flashing LED)
        delay(100);
        delay(100);
        delay(100);
        delay(100);
        delay(100);
        //Stop and put down block
        stop();
        dropBlock();

        //Set new route, based on delivCounter (number of blocks delivered) and whether the robot is currently at the red or green delivery points
        if (delivCounter == 0) {
          if (green) {
            action = greenP2;
          }
          if (!green) {
            action = redP2;
        }
        }
        if (delivCounter == 1) {
          if (green) {
            action = greenP3;
          }
          if (!green) {
            action = redP3;
          }
        }
        if (delivCounter == 2) {
          if (green) {
            action = greenP4; 
          }
          if (!green) {
            action = redP4;
        }
        }
        //If this is the final delivery, stop
        if (delivCounter == 3) {
            stop();
            run = false;
          if (green) {
            action = greenFinish;
          }
          if (!green) {
            action = redFinish;
        }
        }
        //Debugging: print the current route
        Serial.println(action);
        //Delivery made, therefore increment delivCounter
        delivCounter++;
        //Debugging: print delivCounter
        Serial.print("deliv counter");
        Serial.println(delivCounter);
      }

      //'X' indicates to stop at the pick up point
      if (action[0] == 'X'){
        //Capture the block, with given amount of time to line follow straight within the bay, calibrated for each bay
        //e.g. for the first bay (no deliveries made yet), line follow straight for 60ms before capturing the block
        if (delivCounter == 0) {
          captureBlock(60);
        }
        if (delivCounter == 1) {
          captureBlock(110);
        }
        if (delivCounter == 2) {
          captureBlock(70);
        }
        if (delivCounter == 3) {
          captureBlock(50);
        }

        //Set the next route based on the number of deliveries made and whether we should go to the green or red delivery points (decided in captureBlock())
        if (delivCounter == 0) {
          if (green) {
            action = P1Green;
          }
          if (!green) {
            action = P1Red;
        }
        }
        if (delivCounter == 1) {
          if (green) {
            action = P2Green;
          }
          if (!green) {
            action = P2Red;
        }
        }
        if (delivCounter == 2) {
          if (green) {
            action = P3Green;
          }
          if (!green) {
            action = P3Red;
        }
        }
        if (delivCounter == 3) {
          if (green) {
            action = P4Green;
          }
          if (!green) {
            action = P4Red;
        }
        }

        //Debugging: print the current route
        Serial.println(action);
        //Stop and then increment routeCounter (to 2, indicating reversal out of pick-up point)
        stop();
        delay(1000);
        routeCounter++;
        }
      }
    
    //If the current action is not one to stop, the robot should navigate along the route
    else{
      navDecision();
    }
  }
  
    //If routeCounter = 2, indicates reversal out of the pick-up point until either of the two outer line sensors hit the white line
    //Then, routeCounter will be decremented back to 1 for navigation, including turning out of the pick-up point
    if (routeCounter == 2) {
      lineSensorRead();
      if (!lineSensors[0] && !lineSensors[3]) {
        reverse(200);
      }
      else {
        stop();
        routeCounter = 1;
    }
  }
}
}

//Define stop function, with optional t parameter for length of stop delay
void stop(int t=0) {
  //Set motor speeds to zero
  leftMotor->setSpeed(0);
  rightMotor->setSpeed(0);
  //might need to run(release)
  delay(t);
}

//Define function for driving straight, with parameter t for optional delay (i.e. go straight unconditionally for t ms)
//Parameter speed is the speed of the motors (default is the highest speed, defined above)
void straight(int speed=highSpeed, int t=0) {
  //Set the motors to forward motion at the input speed
  leftMotor->run(forward);
  rightMotor->run(forward);
  leftMotor->setSpeed(speed);
  rightMotor->setSpeed(speed);
  delay(t);
}

//Define function for reversing (opposite to going straight above)
void reverse(int speed=highSpeed, int t=0) {
  leftMotor->run(backward);
  rightMotor->run(backward);
  leftMotor->setSpeed(speed);
  rightMotor->setSpeed(speed);
  delay(t); 
}

//Define function for turning the robot
//Parameters: high and low indicate the high and low speeds to be used
//            left is true if the robot should turn left
//            rev is true if the inside wheel should be reversed to tighten the turning circle
void turn(int high, int low, bool left, bool rev) {
  //If turn left, set the left motor to a low speed and the right motor to a high speed
  if(left){
    //If rev = true, the inside wheel (left for left turn) should be set to go backwards to tighten the turning circle
    if (rev) {
      leftMotor->run(backward);
    }
    //Otherwise, the inside wheel should go forwards
    if (!rev) {
      leftMotor->run(forward);
    }
    //Set right motor t forwards, set left motor to low speed, set right motor to high speed (independent of rev)
    rightMotor->run(forward);
    leftMotor->setSpeed(low);
    rightMotor->setSpeed(high);
  }
  //For right turn, do opposite (set inside (right) wheel to reverse if rev is true, set right motor to low speed and left motor to high speed)
  else{
    if (rev) {
      rightMotor->run(backward);
    }
    if (!rev) {
      rightMotor->run(forward);
    }
    leftMotor->run(forward);
    leftMotor->setSpeed(high);
    rightMotor->setSpeed(low);
  }
}

//Define specific left and right turn (for ease of use with the left Boolean parameter)
void turn_left(int high, int low, bool rev) {
  turn(high,low,true, rev);
}
void turn_right(int high, int low, bool rev) {
  turn(high,low,false, rev);
}

//Define a function for updating the lineSensors array with the current line sensor readings
void lineSensorRead(){
  //Pos 0 = left-most (junction) line sensor
  lineSensors[0] = digitalRead(leftmostlinesensorPin);
  //Pos 1 = left-centre (line-following) line sensor
  lineSensors[1] = digitalRead(leftlinesensorPin);
  lineSensors[2] = digitalRead(rightlinesensorPin);
  lineSensors[3] = digitalRead(rightmostlinesensorPin);
}

//Define a function for following a line (junction detection handled separately in lineFollowing)
//Parameters are the high and low speeds for movement (low speed used in turning to get back on line)
void lineFollowingStraight(int high, int low) {
  //Read current line sensor values
  lineSensorRead();
  //If both middle sensors are white (1), then the line is being followed correctly
  if (lineSensors[1] && lineSensors[2]){
    //Go straight
    straight(high);
  }

  //If right-centre line sensor is black (0) and the left-centre sensor white (1), then the robot is too far right
  if (lineSensors[1] && !lineSensors[2] ) {
    //Turn left to correct back onto line
    turn_left(high, low, false);
  }
  
  //If left-centre line sensor is black (0) and the right-centre sensor white (1), then the robot is too far left
  if (!lineSensors[1] && lineSensors[2] ) {
    //Turn right to correct back onto line
    turn_right(high, low, false);
  }
}


void lineFollowing() {
  lineSensorRead();
  Serial.print(lineSensors[0]);
  Serial.print(lineSensors[1]);
  Serial.print(lineSensors[2]);
  Serial.println(lineSensors[3]);


  lineFollowingStraight(highSpeed, medSpeed);

  // in case of a double t junction
  if (!lineSensors[1] && !lineSensors[2] && action[0] != 'Z') {
    Serial.println("double t junction");
    while (!(lineSensors[1] && lineSensors[2])) {
      lineSensorRead();
      if (action[0] == 'R') {
        turn_right(250, 80, true); 
      }
      if (action[0] == 'L') {
        turn_left(250, 80, true); 
      }
      }
    for (int i = 0; i <= 20; i += 1){
          lineFollowingStraight(250, 50);
          delay(10);
        }
    action++;
    }

  
  // in case of a single right t junction 
  if (!lineSensors[0] && lineSensors[1] && lineSensors[2] && lineSensors[3]){
      Serial.println("t right junction");
      if (action[0] == 'R') {
        turn_right(250, 150, true);
        delay(200);
        delay(200);
        delay(200);
        delay(200);
        delay(200);
        while (!(lineSensors[1] && lineSensors[2])) {
          lineSensorRead();
          if (lineSensors[1] && lineSensors[2]) {
            action ++;
          }
        }  
    }
      if (action[0] == 'S'){
        for (int i = 0; i <= 100; i += 1){
          lineFollowingStraight(250, 50);
          delay(10);
        }
        action ++;
      }
  }

  // in case of a single left t junction 
  if (lineSensors[0] && lineSensors[1] && lineSensors[2] && !lineSensors[3]){
      Serial.println("t left junction");
      if (action[0] == 'L') {
        turn_left(250, 150, true);
        delay(200);
        delay(200);
        delay(200);
        delay(200);
        delay(200);
        while (!(lineSensors[1] && lineSensors[2])) {
          lineSensorRead();
          if (lineSensors[1] && lineSensors[2]) {
            action ++;
          }
        }
      }
      if (action[0] == 'S'){
        for (int i = 0; i <= 100; i += 1){
          lineFollowingStraight(250, 50);
          delay(10);
        }
        action++;
      }
  }
  //reverse
    if (action[0] == 'N') { 
      turn_left(200, 80, true);
      delay(200);
      delay(200);
      delay(200);
      delay(200);
      delay(200);
      delay(200);
      while (!lineSensors[1] && !lineSensors[2]) {
        lineSensorRead();
      }
      action ++;
    }
    if (action[0] == 'M') {
      turn_right(200, 150, true);
      delay(200);
      delay(200);
      delay(200);
      delay(200);
      delay(200);
      delay(200);
      while (!lineSensors[1] && !lineSensors[2]) {
        lineSensorRead();
      }
      action ++;
    }
    if (action[0] == 'Z') {
      Serial.println("we are turning out of the bay hopefully");
      if (green) {
        turn_left(250,250,true);
      }
      else{
        turn_right(250,250,true);
      }
      delay(2400);
      while (!(lineSensors[1] && lineSensors[2])) {
        Serial.println("turning");
        lineSensorRead();
      }
      action++;
    }
}

void navDecision() {
    lineSensorRead();
    Serial.println(action[0]);
    lineFollowing();
    }



void liftGripper() {
  posCurrentLift = rampedServoMove(liftServo, posCurrentLift, posLiftUp, 1);
}

void lowerGripper() {
  posCurrentLift = rampedServoMove(liftServo, posCurrentLift, posLiftDown, 1);
}

void partialLowerGripper() {
  posCurrentLift = rampedServoMove(liftServo, posCurrentLift, posPartialLiftDown, 1);
}

void openGripper() {
  posCurrentGripper = rampedServoMove(gripperServo, posCurrentGripper, posGripperOpen, 1);
}

void closeGripper() {
  posCurrentGripper = rampedServoMove(gripperServo, posCurrentGripper, posGripperClose, 1);
}

int rampedServoMove(Servo &servoLocal, int currentDegree, int desiredDegree, int increment, int timeDelay = 15) {
  if (currentDegree < desiredDegree) {
    for (; currentDegree <= desiredDegree; currentDegree += increment) {
      servoLocal.write(currentDegree);
      delay(timeDelay);
    }
  } else {
    for (; currentDegree >= desiredDegree; currentDegree -= increment) {
      servoLocal.write(currentDegree);
      delay(timeDelay);
    }
  }
  return desiredDegree;
}


float getUltrasoundSensorReading(int pin = A0, float ADC_SOLUTION = 1023.0, int MAX_ULTRASOUND_RANG = 520) {
  sensitivity = analogRead(pin);
  distance = sensitivity * MAX_ULTRASOUND_RANG / ADC_SOLUTION;
  Serial.print(distance, 0);
  Serial.println("cm");
  return distance;
}


bool blockinRange(int range) {
  for (int i = 0; i < 2; i++) {
    if (getUltrasoundSensorReading() < range) {
      if (i == 1) {  // If it's the second iteration and the block is still in range
        Serial.println("True returned in blockinRange");
        return true;
      }
      delay(50);  // Wait for a short period before checking again
    } else {
      return false;  // If the block is not in range in the first check, no need to wait or check again
    }
  }
  return false;  // In case the block was in range during the first check but not the second
}


bool captureBlock(int t) {
  stop();

  reverse(180, 1000);
  stop();

  int maxAttempts = 5;
  closeGripper();  // Ensure gripper closed before lowering it
  delay(500);

  lowerGripper();
  delay(100);

  openGripper();

  /*while (getUltrasoundSensorReading() >= 5) {
    Serial.println(getUltrasoundSensorReading());
    lineFollowingStraight(150, 30);
  }*/

  for (int i = 0; i <= t; i += 1){
    lineFollowingStraight(250, 50);
    delay(10);
  }
  stop();

  int count = 0;
  while (!blockinRange(5) && count < maxAttempts) {  // Keep checking if the block is in range, up to max attempt
    Serial.println("In Loop");
    count++;
  }
  stop();

  if (blockinRange(5)) {
    closeGripper();

    green = !(colorDetection()); 

    //light correct LED based on found colour, turn off incorrect LED, stay stationary for 5 secs, as per rules
    if (green){
      digitalWrite(redLEDPin, LOW);
      digitalWrite(greenLEDPin, HIGH);
      delay(5000);
    }
    else{
      digitalWrite(greenLEDPin, LOW);
      digitalWrite(redLEDPin, HIGH);
      delay(5000);
    }

    reverse(180, 150);
    stop();

    liftGripper();
    delay(100);

    return true;  // Indicate the block has been captured with confidence
  } else {
    closeGripper();
    delay(100);

    /*
    if (colorDetection()) {
      green = false;
    }
    Serial.print("Green:");
    Serial.println(green);
    */

    green = !(colorDetection()); 

    //light correct LED based on found colour, turn off incorrect LED, stay stationary for 5 secs, as per rules
    if (green){
      digitalWrite(redLEDPin, LOW);
      digitalWrite(greenLEDPin, HIGH);
      delay(5000);
    }
    else{
      digitalWrite(greenLEDPin, LOW);
      digitalWrite(redLEDPin, HIGH);
      delay(5000);
    }

    liftGripper();
    delay(100);
    return false;  // Indicate that the block capture was completed in doubt
    // We could update this place to a pure return to false, and then implement another loop outside to allow it moves randomly to the front/back a bit with the gripper lowered, and then we restart the function from the top in that loop
  }
}

bool dropBlock(){
  for (int i = 0; i <= 50; i += 1){
    lineFollowingStraight(250, 50);
    delay(10);
  }
  stop();
  partialLowerGripper();
  delay(100);
  openGripper();
  delay(100);
  reverse(180,700);
  stop();
  closeGripper();
  delay(100);
  liftGripper();
}


//Return true if RED
float getColorSensorReading(int pin = 9) {
  return digitalRead(pin);
}


//Return true if RED
bool colorDetection() {
  bool previousDetection, currentDetection;
  int attempts = 10;  // Max number of attempts before giving a less confident value returned

  previousDetection = getColorSensorReading();
  for (int i = 0; i < attempts; i++) {
    delay(100);  // Wait before taking the next reading
    currentDetection = getColorSensorReading();

    if (previousDetection == currentDetection) {
      return previousDetection;  // Return the stable detection value
    }

    previousDetection = currentDetection;
  }

  //Handle the case where a stable reading couldn't be obtained
  return currentDetection;
}
