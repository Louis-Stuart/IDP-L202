#include <Adafruit_MotorShield.h>


Adafruit_MotorShield AFMS = Adafruit_MotorShield();
Adafruit_DCMotor *leftMotor = AFMS.getMotor(1);
Adafruit_DCMotor *rightMotor = AFMS.getMotor(2);
int leftmostlinesensorPin = 1;
int leftlinesensorPin = 2;
int rightlinesensorPin = 3;
int rightmostlinesensorPin = 4;
int redLEDPin = 9;
int greenLEDPin = 10;
int blueLEDPin =  11;
int buttonPin = 12; // Connect button to input pin 12



//define constant

int lineSensors[4];
int lowSpeed = 0;
int highSpeed = 180;
int medSpeed = 90;
char forward = BACKWARD;
char backward = FORWARD;
int routeCounter = 0;
int delivCounter = 0;


//predefining navigation arrays

char testRoute[] = {'R', 'L', 'S', 'S' };
char startP1[5] = {'L', 'R', 'X'};
char P1Green[4] = {'L', 'L', 'W'};
char P1Red[5] = {'B', 'R', 'S', 'R', 'X'};
char greenP2[6] = {'Z', 'S', 'S', 'R', 'R', 'X'};
char redP2[7] = {'Z', 'S', 'S', 'S', 'L', 'R', 'X'};
char P2Green[6] = {'B', 'R', 'L', 'S', 'S', 'X'};
char P2Red[7] = {'B', 'R', 'R', 'S', 'S', 'S', 'X'};
char greenP3[6] = {'Z', 'S', 'S', 'S', 'R', 'X'};
char redP3[5] = {'Z', 'S', 'S', 'L', 'X'};
char P3Green[6] = {'B', 'R', 'S', 'S', 'S', 'X'};
char P3Red[5] = {'B', 'L', 'S', 'S', 'X'};
char greenP4[6] = {'Z', 'S', 'R', 'S', 'R', 'X'};
char redP4[5] = {'Z', 'S', 'L', 'L', 'X'};
char P4green[] = {'B', 'R', 'S', 'L', 'S', 'X'} ;
char P4red[] = {'B', 'L', 'R', 'S', 'X'};
char redFinish[4] = {'Z', 'L', 'L', 'X'};
char greenFinish[5] = {'Z', 'R', 'S', 'R', 'X'};


char *action;

//predefine function
void lineSensorRead();
void lineFollowing();
void stop(int t=0);
void straight(int speed=highSpeed, int t=0);
void reverse(int speed=highSpeed, int t=0);
void turn(int high, int low, bool left);
void turn_right();
void turn_left();
void navDecision();
void actionTranslate(char action); 

void setup() {
  Serial.begin(9600);           
  if (!AFMS.begin()) {        
    Serial.println("Could not find Motor Shield. Check wiring.");
    while (1);
  }
  pinMode(leftmostlinesensorPin, INPUT); // declare LED as output
  pinMode(leftlinesensorPin, INPUT); // declare Micro switch as input
  pinMode(rightlinesensorPin, INPUT); // declare LED as output
  pinMode(rightmostlinesensorPin, INPUT); // declare Micro switch as input
  pinMode(buttonPin, INPUT); // declare pushbutton as input

  action = startP1; // define the action pointer to point to the address of the first element of the inital array
}


//main
void loop() {
  if (routeCounter == 0) {
    straight(highSpeed, 1500);
    routeCounter ++;
  }
  //test any function by adding it in
  //current action = L
  //if (digitalRead(buttonPin) == LOW) {
  if (routeCounter == 1) {
    if (action[0] == 'X' || action[0] == 'W'){
      if (action[0] == 'W'){
        delay(300);
      }
      stop();
      delay(1000);
      routeCounter++;
    }
    else{
      navDecision();
    }
  }
  

  /*}
  else{
    action = testRoute; // define the action pointer to point to the address of the first element of the inital array
    routeCounter = 0;
    delivCounter = 0;
    stop(2000);
  }
*/
  
    if (routeCounter == 2) {
      lineSensorRead();
      if (!lineSensors[0] && !lineSensors[3]) {
        reverse(150);
      }
      else {
        stop();
        action = P1Green;
        routeCounter = 1;
    }
  }
}

void stop(int t=0) {
  leftMotor->setSpeed(0);
  rightMotor->setSpeed(0);
  //might need to run(release)
  delay(t);
}

void straight(int speed=highSpeed, int t=0) {
  leftMotor->run(forward);
  rightMotor->run(forward);
  leftMotor->setSpeed(speed);
  rightMotor->setSpeed(speed);
  delay(t);
}

void reverse(int speed, int t) {
  leftMotor->run(backward);
  rightMotor->run(backward);
  leftMotor->setSpeed(speed);
  rightMotor->setSpeed(speed);
  delay(t); 
}

void turn(int high, int low, bool left, bool rev) {
  if(left){
    if (rev) {
      leftMotor->run(backward);
      rightMotor->run(forward);
      leftMotor->setSpeed(low);
      rightMotor->setSpeed(high);
    }
    if (!rev) {
      leftMotor->run(forward);
      rightMotor->run(forward);
      leftMotor->setSpeed(low);
      rightMotor->setSpeed(high);
    }
  }
  else{
    if (rev) {
      leftMotor->run(forward);
      rightMotor->run(backward);
      leftMotor->setSpeed(high);
      rightMotor->setSpeed(low);
    }
    if (!rev) {
      leftMotor->run(forward);
      rightMotor->run(forward);
      leftMotor->setSpeed(high);
      rightMotor->setSpeed(low);
    }
  }
}

void turn_left(int high, int low, bool rev) {
  turn(high,low,true, rev);
}

void turn_right(int high, int low, bool rev) {
  turn(high,low,false, rev);
}

void lineSensorRead(){
  lineSensors[0] = digitalRead(leftmostlinesensorPin);
  lineSensors[1] = digitalRead(leftlinesensorPin);
  lineSensors[2] = digitalRead(rightlinesensorPin);
  lineSensors[3] = digitalRead(rightmostlinesensorPin);
}


void lineFollowing() {
  lineSensorRead();
  Serial.print(lineSensors[0]);
  Serial.print(lineSensors[1]);
  Serial.print(lineSensors[2]);
  Serial.print(lineSensors[3]);
  Serial.println(action[0]);


  // line sensing based on the two middle sensors always picking up white 
  if (lineSensors[1] && lineSensors[2] && !lineSensors[0] && !lineSensors[3]){
    // sensor0=0, sensor1=1, sensor2=1, sensor3=0
    Serial.println("straight");
    straight();
  }

  // correction for staying on the line
  if (lineSensors[1] && !lineSensors[2] && !lineSensors[0] && !lineSensors[3]) {
    // sensor0=0, sensor1=1, sensor2=0, sensor3=0
    Serial.println("correct left");
    turn_left(highSpeed, medSpeed, false);
  }
  
  // correction for staying on the line
  if (!lineSensors[1] && lineSensors[2] && !lineSensors[0] && !lineSensors[3]) {
    // sensor0=0, sensor1=0, sensor2=1, sensor3=0
    Serial.println("correct right");
    turn_right(highSpeed, medSpeed, false);
  }

  // in case of a double t junction
  if (!lineSensors[1] && !lineSensors[2]) {
    // this will turn the car left the moment the middle two sensors detect black until they both detect white again
    Serial.println("double t junction");
    while (!lineSensors[1] && !lineSensors[2]) {
      lineSensorRead();
      if (action[0] == 'R') {
        turn_right(180, 50, true); 
      }
      if (action[0] == 'L') {
        turn_left(180, 50, true); 
      }
      }
    action++;
    }

  
  // in case of a single right t junction 
  if (!lineSensors[0] && lineSensors[1] && lineSensors[2] && lineSensors[3]){
    delay(500);
    if (!lineSensors[0] && lineSensors[1] && lineSensors[2] && lineSensors[3]){
      Serial.println("t right junction");
      if (action[0] == 'R') {
        turn_right(150, 100, true);
        delay(1000);
        while (!(lineSensors[1] && lineSensors[2])) {
          lineSensorRead();
          if (lineSensors[1] && lineSensors[2]) {
            action ++;
          }
        }
      
      }
    }
      if (action[0] == 'S'){
        straight(1000);
        action ++;
      }
  }

  // in case of a single left t junction 
  if (lineSensors[0] && lineSensors[1] && lineSensors[2] && !lineSensors[3]){
    delay(500);
    if (lineSensors[0] && lineSensors[1] && lineSensors[2] && !lineSensors[3]){
      Serial.println("t left junction");
      if (action[0] == 'L') {
        turn_left(150, 100, true);
        delay(1000);
        while (!lineSensors[1] && !lineSensors[2]) {
          lineSensorRead();
          if (lineSensors[1] && lineSensors[2]) {
            action ++;
          }
        }
      }
      if (action[0] == 'S'){
        straight(500);
        action++;
      }
    }
  }
  if (lineSensors[0] &&  lineSensors[3]) {
    if (action[0] == 'L') { 
      turn_left(150, 100, true);
      delay(1000);
      while (!(lineSensors[1] && lineSensors[2])) {
        lineSensorRead();
      }
      action ++;
    }
    if (action[0] == 'R') {
      turn_right(150, 100, true);
      delay(1000);
      while (!(lineSensors[1] && lineSensors[2])) {
        lineSensorRead();
      }
      action ++;
    }
  }
}

void navDecision() {
    lineSensorRead();
    Serial.println(action[0]);
    lineFollowing();
    }
